[versions]
# Configurations ==
androidGradlePlugin = "8.9.3"
compileSdk = "36"
targetSdk = "35"
minSdk = "21"
# =================

accompanist = "0.32.0"
androidDesugarJdkLibs = "2.1.4"
androidx-test-ext-junit = "1.2.1"
androidxComposeBom = "2024.12.01"
androidxCore = "1.15.0"
androidxCoreSplashscreen = "1.0.1"
androidxDataStore = "1.1.1"
androidxTestCore = "1.6.1"
androidxTestRules = "1.6.1"
androidxTestRunner = "1.6.2"
coil = "3.0.4"
compose = "1.7.6"
composeDestinations = "1.9.53"
conscrypt = "2.5.2"
constraintLayout = "1.1.0"
coreStubs = "1.2.5"
coroutines = "1.9.0"
espresso-core = "3.6.1"
gson = "2.11.0"
hilt = "2.49"
hiltNavigation = "1.2.0"
junit = "4.13.2"
jsoup = "1.21.1"
kotlin = "2.0.21"
kotlinxImmutables = "0.3.8"
ktlint = "12.1.2"
ktlintCompose = "0.4.22"
ksp = "2.0.21-1.0.28"
lifecycleRuntime = "2.8.7"
localbroadcastmanager = "1.1.0"
markdown = "0.5.5"
material = "1.12.0"
media3 = "1.8.0"
media-ffmpeg = "0.8.2"
mockk = "1.14.5"
okhttp = "5.0.0-alpha.14"
palette = "1.0.0"
pauseCoroutine = "3959287e12"
retrofit = "2.11.0"
room = "2.6.1"
serialization = "1.6.3"
turbine = "1.2.0"
strikt = "0.33.0"
tvCompose = "1.0.0-alpha10" # TODO: Update TV Compose to stable
unifile = "1.0.0"
universalChardet = "2.5.0"

[libraries]
# Android Core
broadcastmanager = { group = "androidx.localbroadcastmanager", name = "localbroadcastmanager", version.ref = "localbroadcastmanager" }

# Accompanist
accompanist-navigation-animation = { module = "com.google.accompanist:accompanist-navigation-animation", version.ref = "accompanist" }
accompanist-permissions = { group = "com.google.accompanist", name = "accompanist-permissions", version.ref = "accompanist" }

# Jsoup
jsoup = { module = "org.jsoup:jsoup", version.ref = "jsoup" }

# Coil
coil-compose = { group = "io.coil-kt.coil3", name = "coil-compose", version.ref = "coil" }
coil-network-okhttp = { group = "io.coil-kt.coil3", name = "coil-network-okhttp", version.ref = "coil" }

# TV UI (Compose)
compose-tv-foundation = { module = "androidx.tv:tv-foundation", version.ref = "tvCompose"}
compose-tv-material = { module = "androidx.tv:tv-material", version.ref = "tvCompose"}

# UI (Compose)
compose-animation = { group = "androidx.compose.animation", name = "animation" }
compose-animation-graphics = { group = "androidx.compose.animation", name = "animation-graphics-android" }
compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "androidxComposeBom" }
compose-foundation = { group = "androidx.compose.foundation", name = "foundation" }
compose-foundation-layout = { group = "androidx.compose.foundation", name = "foundation-layout" }
compose-material-iconsExtended = { group = "androidx.compose.material", name = "material-icons-extended" }
compose-material = { group = "androidx.compose.material", name = "material" }
compose-material3 = { group = "androidx.compose.material3", name = "material3" }
compose-material3-windowSizeClass = { group = "androidx.compose.material3", name = "material3-window-size-class" }
compose-runtime = { group = "androidx.compose.runtime", name = "runtime" }
compose-ui = { group = "androidx.compose.ui", name = "ui" }
compose-ui-alpha = { group = "androidx.compose.ui", name = "ui", version.ref = "compose" }
compose-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
compose-ui-test = { group = "androidx.compose.ui", name = "ui-test-junit4" }
compose-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
compose-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
compose-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
compose-ui-util = { group = "androidx.compose.ui", name = "ui-util" }
compose-viewbinding = { group = "androidx.compose.ui", name = "ui-viewbinding" }
compose-adaptive = { group = "androidx.compose.material3.adaptive", name = "adaptive" }
compose-adaptive-layout = { group = "androidx.compose.material3.adaptive", name = "adaptive-layout" }
compose-adaptive-navigation = { group = "androidx.compose.material3.adaptive", name = "adaptive-navigation" }
constraintlayout-compose = { module = "androidx.constraintlayout:constraintlayout-compose", version.ref = "constraintLayout"}
core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "androidxCore" }
core-splashscreen = { group = "androidx.core", name = "core-splashscreen", version.ref = "androidxCoreSplashscreen" }
material = { group = "com.google.android.material", name = "material", version.ref = "material" }

# KtLint Compose
compose-rules = { group = "io.nlopez.compose.rules", name = "ktlint", version.ref = "ktlintCompose" }

# Compose Destinations by raamcosta
destinations-animations = { module = "io.github.raamcosta.compose-destinations:animations-core", version.ref = "composeDestinations" }
destinations-core = { module = "io.github.raamcosta.compose-destinations:ksp", version.ref = "composeDestinations" }
destinations-ksp = { module = "io.github.raamcosta.compose-destinations:ksp", version.ref = "composeDestinations" }

# Palette API
palette = { module = "androidx.palette:palette", version.ref = "palette" }

# Core-stubs
stubs-model-film = { group = "com.github.flixclusiveorg.core-stubs", name = "model-film", version.ref = "coreStubs" }
stubs-model-provider = { group = "com.github.flixclusiveorg.core-stubs", name = "model-provider", version.ref = "coreStubs" }
stubs-provider = { group = "com.github.flixclusiveorg.core-stubs", name = "provider", version.ref = "coreStubs" }
stubs-util = { group = "com.github.flixclusiveorg.core-stubs", name = "core-util", version.ref = "coreStubs" }

# Universal chardet
universalchardet = { group = "com.github.albfernandez", name = "juniversalchardet", version.ref = "universalChardet" }

# Gson
gson = { group = "com.google.code.gson", name = "gson", version.ref = "gson" }

# Immutables
kotlinx-immutables = { group = "org.jetbrains.kotlinx", name = "kotlinx-collections-immutable", version.ref = "kotlinxImmutables" }

# Data Store
dataStore-preferences = { group = "androidx.datastore", name = "datastore-preferences", version.ref = "androidxDataStore" }

# Lifecycle
lifecycle-runtimeCompose = { group = "androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "lifecycleRuntime" }
lifecycle-viewModelCompose = { group = "androidx.lifecycle", name = "lifecycle-viewmodel-compose", version.ref = "lifecycleRuntime" }
lifecycle-viewModelKtx = { group = "androidx.lifecycle", name = "lifecycle-viewmodel-ktx", version.ref = "lifecycleRuntime" }

# Media3
media3-cast = { group = "androidx.media3", name = "media3-cast", version.ref = "media3" }
media3-common = { group = "androidx.media3", name = "media3-common", version.ref = "media3" }
media3-common-ktx = { group = "androidx.media3", name = "media3-common-ktx", version.ref = "media3" }
media3-datasource-okhttp = { group = "androidx.media3", name = "media3-datasource-okhttp", version.ref = "media3" }
media3-exoplayer = { group = "androidx.media3", name = "media3-exoplayer", version.ref = "media3" }
media3-exoplayer-hls = { group = "androidx.media3", name = "media3-exoplayer-hls", version.ref = "media3" }
media3-ffmpeg = { group = "com.github.anilbeesetti.nextlib", name = "nextlib-media3ext", version.ref = "media-ffmpeg" }
media3-session = { group = "androidx.media3", name = "media3-session", version.ref = "media3" }
media3-ui = { group = "androidx.media3", name = "media3-ui", version.ref = "media3" }
media3-ui-compose = { group = "androidx.media3", name = "media3-ui-compose", version.ref = "media3" }
media3-ui-leanback = { group = "androidx.media3", name = "media3-ui-leanback", version.ref = "media3" }
media3-test-utils = { group = "androidx.media3", name = "media3-test-utils", version.ref = "media3" }

# Markdown
markdown = { module = "com.github.rhenwinch:compose-markdown", version.ref = "markdown" }

# Hilt
hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hilt"}
hilt-compiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hilt"}
hilt-navigation = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "hiltNavigation"}

# Kotlin core
desugarJdkLibs = { group = "com.android.tools", name = "desugar_jdk_libs", version.ref = "androidDesugarJdkLibs" }
kotlinx-coroutines = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-android", version.ref = "coroutines" }
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization"}

# Conscrypt
conscrypt = { module = "org.conscrypt:conscrypt-android", version.ref = "conscrypt" }

# OkHttp
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-dnsoverhttps = { module = "com.squareup.okhttp3:okhttp-dnsoverhttps", version.ref = "okhttp" }

# Retrofit
retrofit = { group = "com.squareup.retrofit2", name = "retrofit", version.ref = "retrofit" }
retrofit-gson = { group = "com.squareup.retrofit2", name = "converter-gson", version.ref = "retrofit" }

# Room
room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
room-testing = { group = "androidx.room", name = "room-testing", version.ref = "room" }

# Unifile
unifile = { module = "com.github.seven332:unifile", version.ref = "unifile" }

# Testing
pauseCoroutineDispatcher = { group = "com.github.Koitharu", name = "pausing-coroutine-dispatcher", version.ref = "pauseCoroutine" }
coroutines-test = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-test", version.ref = "coroutines" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
mockk = { group = "io.mockk", name = "mockk", version.ref = "mockk" }
mockk-android = { group = "io.mockk", name = "mockk-android", version.ref = "mockk" }
hilt-testing = { module = "com.google.dagger:hilt-android-testing", version.ref = "hilt"}
test-core = { group = "androidx.test", name = "core", version.ref = "androidxTestCore" }
test-core-ktx = { group = "androidx.test", name = "core-ktx", version.ref = "androidxTestCore" }
test-rules = { group = "androidx.test", name = "rules", version.ref = "androidxTestRules" }
test-runner = { group = "androidx.test", name = "runner", version.ref = "androidxTestRunner" }
turbine = { group ="app.cash.turbine", name = "turbine", version.ref = "turbine" }
strikt = { group = "io.strikt", name = "strikt-core", version.ref = "strikt" }

# Dependencies for build-logic
android-gradlePlugin = { group = "com.android.tools.build", name = "gradle", version.ref = "androidGradlePlugin" }
androidx-test-ext-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidx-test-ext-junit" }
espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espresso-core" }
kotlin-gradlePlugin = { group = "org.jetbrains.kotlin", name = "kotlin-gradle-plugin", version.ref = "kotlin" }
ksp-gradlePlugin = { group = "com.google.devtools.ksp", name = "com.google.devtools.ksp.gradle.plugin", version.ref = "ksp" }
room-gradlePlugin = { group = "androidx.room", name = "room-gradle-plugin", version.ref = "room" }

[plugins]
android-application = { id = "com.android.application", version.ref = "androidGradlePlugin" }
android-library = { id = "com.android.library", version.ref = "androidGradlePlugin" }
hilt = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint" }
room = { id = "androidx.room", version.ref = "room" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }



# Plugins defined by this project
flixclusive-application = { id = "flixclusive.android.application", version = "unspecified" }
flixclusive-compose = { id = "flixclusive.compose", version = "unspecified" }
flixclusive-destinations = { id = "flixclusive.destinations", version = "unspecified" }
flixclusive-feature-mobile = { id = "flixclusive.feature.mobile", version = "unspecified" }
#flixclusive-feature-tv = { id = "flixclusive.feature.tv", version = "unspecified" }
flixclusive-hilt = { id = "flixclusive.hilt", version = "unspecified" }
flixclusive-library = { id = "flixclusive.android.library", version = "unspecified" }
flixclusive-room = { id = "flixclusive.room", version = "unspecified" }
flixclusive-testing = { id = "flixclusive.testing", version = "unspecified" }
